---
import Layout from '../layouts/Layout.astro';

if (!Astro.cookies.has("session")) {
  return new Response(null, {
    status: 302,
    headers: {
      Location: "/signup",
    },
  });
}
---

<Layout>
	<h1>My Awesome Chat</h1>
	<h2>Choose room:</h2>
	<button class="btn-room" data-room="">Home</button>
	<button class="btn-room" data-room="Room 1">Room 1</button>
	<button class="btn-room" data-room="Room 2">Room 2</button>
	<button class="btn-room" data-room="Room 3">Room 3</button>

	<form id="chat-form">
		<input type="text" id="username">
		<input type="text" id="chat-message">
		<button>Send</button>
	</form>

	<h3 id="room-heading"></h3>

	<ul id="messages">
		<!-- CHAT MESSAGES GO HERE -->
	</ul>

	<button class="btn btn-logout">Log out</button>
</Layout>

<script type="module">
	import { io } from "https://cdn.socket.io/4.8.1/socket.io.esm.min.js";

	const socket = io('http://localhost:3500') // backend url
	const inputUsername = document.querySelector('#username')
	const inputMessage = document.querySelector('#chat-message')
	const roomButtons = document.querySelectorAll('.btn-room')
	const form = document.querySelector('#chat-form')
	const messages = document.querySelector('#messages')
	const roomHeading = document.querySelector('#room-heading')
	let currentRoom = '' // default room

	// Handle room buttons
	roomButtons.forEach(btn => {
		btn.addEventListener('click', () => {
			const roomName = btn.getAttribute('data-room')
			const username = inputUsername.value || 'Anonymous'

			messages.innerHTML = '' // Reset chat messages

			fetch(`http://localhost:3500/api/chat/${roomName}`)
			.then(res => res.json())
			.then(history => {
				history.forEach(data => {
					const li = document.createElement('li');
					li.innerHTML = `<span style="${data.username === inputUsername.value ? 'color: green' : 'color: black'}">${data.username ?? 'System'}:</span> ${data.message}`;
					messages.appendChild(li);
				});

				// Join new room
				currentRoom = roomName
				roomHeading.textContent = roomName
				socket.emit('join room', {
					username,
					room: currentRoom
				})
			});

			// Leave room
			if (currentRoom) {
				socket.emit('leave room', {
					username,
					room: currentRoom
				})
			}
	})
	})

	form.addEventListener('submit', (e) => {
		e.preventDefault()

		socket.emit('sendMessage', {
			username: inputUsername.value,
			message: inputMessage.value,
			room: currentRoom
		})
	})

	// Listening for new messages on chat event
	socket.on('newMessage', (data) => {
		if (data.room === currentRoom) {
			const li = document.createElement('li')
			li.innerHTML = `<span style="${data.username === inputUsername.value ? 'color: green' : 'color: black'}">${data.username ?? 'System'}:</span> ${data.message}`
			messages.appendChild(li)
		}
	})

	const logout = async () => {
    const res = await fetch(`http://localhost:3500/users/logout`, {
      method: "GET",
      credentials: "include"
    })
    const data = await res.json()
    return data
  }

	const btnLogout = document.querySelector(".btn-logout");
	btnLogout.addEventListener("click", async () => {
		if (confirm(`Are you sure to log out?`)) {
			await logout();
			window.location.href = "/login";
		}
		return
	});
</script>

